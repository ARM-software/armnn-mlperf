{
  "backup_data_uid": "0019a4e0d2314d99", 
  "compile_deps": {
    "compiler": {
      "local": "yes", 
      "name": "C++ compiler", 
      "sort": 0, 
      "tags": "compiler,lang-cpp"
    }, 
    "lib-armnn": {
      "local": "yes", 
      "name": "ArmNN library (with TFLite support)", 
      "sort": 40, 
      "tags": "lib,armnn,tflite",
      "update_tags_if_env": {
        "neon": [
          {
            "USE_NEON": [
              "on", 
              "ON", 
              "yes", 
              "YES", 
              "1", 
              "true", 
              "TRUE"
            ]
          }
        ], 
        "opencl": [
          {
            "USE_OPENCL": [
              "on", 
              "ON", 
              "yes", 
              "YES", 
              "1", 
              "true", 
              "TRUE"
            ]
          }
        ]
      }
    }, 
    "lib-flatbuffers": {
      "local": "yes", 
      "name": "FlatBuffers library", 
      "sort": 90, 
      "tags": "lib,flatbuffers"
    }, 
    "lib-tflite": {
      "local": "yes", 
      "name": "TensorFlow Lite C++ API", 
      "sort": 20, 
      "tags": "lib,tensorflow-lite,tflite,vstatic", 
      "version_from": [
        1, 
        13, 
        1
      ]
    }, 
    "lib-xopenme": {
      "local": "yes", 
      "name": "xOpenME library", 
      "sort": 100, 
      "tags": "lib,xopenme"
    }
  }, 
  "compiler_add_include_as_env_from_deps": [
    "CK_ENV_LIB_STDCPP_INCLUDE", 
    "CK_ENV_LIB_STDCPP_INCLUDE_EXTRA", 
    "CK_ENV_LIB_TF_INCLUDE0", 
    "CK_ENV_LIB_TF_INCLUDE1", 
    "CK_ENV_LIB_TF_INCLUDE2"
  ], 
  "compiler_env": "CK_CXX", 
  "compiler_flags_as_env": "$<<CK_COMPILER_FLAG_CPP14>>$ $<<CK_ENV_LIB_TF_DEF>>$ -Wall -Wno-sign-compare", 
  "data_name": "object-detection-armnn-tflite", 
  "extra_ld_vars": "$<<CK_ENV_LIB_TF_LINK_OPTIONS>>$ $<<CK_ENV_LIB_TF_LIBS_DIRS>>$ $<<CK_ENV_LIB_TF_LIBS>>$ -L$<<CK_ENV_LIB_ARMNN_LIB>>$ -larmnn -lpthread -larmnnTfLiteParser", 
  "linker_add_lib_as_env": [
    "CK_CXX_EXTRA", 
    "CK_ENV_LIB_STDCPP_STATIC"
  ], 
  "main_language": "cpp", 
  "need_cpu_info": "yes", 
  "only_for_target_os_tags": [
    "linux", 
    "android"
  ], 
  "pass_env_to_resolve": "yes", 
  "process_in_tmp": "yes", 
  "program": "yes", 
  "run_cmds": {
    "default": {
      "ignore_return_code": "no", 
      "run_time": {
        "copy_env_to_remote": [
          "CK_ENV_TENSORFLOW_MODEL_CLASSES", 
          "CK_ENV_TENSORFLOW_MODEL_DATASET_TYPE", 
          "CK_ENV_TENSORFLOW_MODEL_IMAGE_HEIGHT", 
          "CK_ENV_TENSORFLOW_MODEL_IMAGE_WIDTH", 
          "CK_ENV_TENSORFLOW_MODEL_IMAGE_CHANNELS", 
          "CK_ENV_TENSORFLOW_MODEL_MAX_DETECTIONS", 
          "CK_ENV_TENSORFLOW_MODEL_NEED_BACKGROUND_CORRECTION", 
          "CK_ENV_TENSORFLOW_MODEL_NORMALIZE_DATA", 
          "CK_ENV_TENSORFLOW_MODEL_NUM_CLASSES", 
          "CK_ENV_TENSORFLOW_MODEL_SUBTRACT_MEAN", 
          "CK_ENV_TENSORFLOW_MODEL_TFLITE_GRAPH_REGULAR_NMS", 
          "CK_ENV_TENSORFLOW_MODEL_TFLITE_GRAPH_FAST_NMS", 
          "CK_ENV_TENSORFLOW_MODEL_TFLITE_GRAPH_NO_NMS", 
          "CK_ENV_TENSORFLOW_MODEL_NMS_SCORE_THRESHOLD", 
          "CK_ENV_TENSORFLOW_MODEL_NMS_IOU_THRESHOLD", 
          "CK_ENV_TENSORFLOW_MODEL_SCALE_H", 
          "CK_ENV_TENSORFLOW_MODEL_SCALE_W", 
          "CK_ENV_TENSORFLOW_MODEL_SCALE_X", 
          "CK_ENV_TENSORFLOW_MODEL_SCALE_Y", 
          "CK_ENV_DATASET_OBJ_DETECTION_PREPROCESSED_SUBSET_FOF"
        ], 
        "fine_grain_timer_file": "tmp-ck-timer.json", 
        "post_process_via_ck": {
          "data_uoa": "24c98b0cee248d93", 
          "module_uoa": "script", 
          "script_name": "iniless_postprocess"
        }, 
        "pre_process_via_ck": {
          "data_uoa": "24c98b0cee248d93", 
          "module_uoa": "script", 
          "script_name": "schindler"
        }, 
        "run_cmd_main": "$#BIN_FILE#$", 
        "run_input_files": [
          "$<<>>$tmp-ck-timer.json", 
          "$<<>>$preprocessed", 
          "$<<>>$preprocessed_images_list.txt", 
          "$<<CK_ENV_TENSORFLOW_MODEL_ROOT>>$/detect_fast_nms.tflite", 
          "$<<CK_ENV_TENSORFLOW_MODEL_ROOT>>$/detect_no_nms.tflite", 
          "$<<CK_ENV_TENSORFLOW_MODEL_ROOT>>$/detect_regular_nms.tflite", 
          "$<<CK_ENV_TENSORFLOW_MODEL_ROOT>>$/flatlabels.txt", 
          "$<<CK_ENV_TENSORFLOW_MODEL_ROOT>>$/flatanchors.txt"
        ], 
        "run_make_directories": [
          "detections", 
          "results"
        ], 
        "run_output_files": [
          "detections", 
          "tmp-ck-timer.json"
        ]
      }
    }
  }, 
  "run_deps": {
    "dataset": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "Preprocessed images", 
      "sort": 20, 
      "tags": "dataset,object-detection,preprocessed"
    }, 
    "lib-flatbuffers": {
      "local": "yes", 
      "name": "FlatBuffers library", 
      "sort": 70, 
      "tags": "lib,flatbuffers"
    }, 
    "lib-python-matplotlib": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "MatPlotLib python library", 
      "sort": 45, 
      "tags": "lib,python-package,matplotlib"
    }, 
    "lib-python-numpy": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "NumPy python library", 
      "sort": 30, 
      "tags": "lib,python-package,numpy"
    }, 
    "lib-python-pillow": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "Pillow python library", 
      "sort": 40, 
      "tags": "lib,python-package,pillow"
    }, 
    "lib-xopenme": {
      "local": "yes", 
      "name": "xOpenME library", 
      "sort": 100, 
      "tags": "lib,xopenme"
    }, 
    "tool-coco": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "Python API for COCO", 
      "sort": 50, 
      "tags": "tool,coco"
    }, 
    "weights": {
      "force_target_as_host": "yes", 
      "local": "yes", 
      "name": "TensorFlow model", 
      "sort": 60, 
      "tags": "model,tflite,object-detection,ssd"
    }
  }, 
  "run_vars": {
    "CK_ANNOTATIONS_OUT_DIR": "annotations", 
    "CK_BATCH_COUNT": 1, 
    "CK_BATCH_SIZE": 1, 
    "CK_DETECTIONS_OUT_DIR": "detections", 
    "CK_PREPROCESSED_OUT_DIR": "preprocessed", 
    "CK_RESULTS_OUT_DIR": "results", 
    "CK_SILENT_MODE": 0, 
    "CK_SKIP_IMAGES": 0, 
    "CK_TIMER_FILE": "tmp-ck-timer.json", 
    "USE_NEON": "NO", 
    "USE_OPENCL": "NO"
  }, 
  "skip_bin_ext": "yes", 
  "source_files": [
    "detect.cpp"
  ], 
  "tags": [
    "tensorflow-lite", 
    "object-detection", 
    "armnn", 
    "tflite", 
    "lang-cpp"
  ], 
  "target_file": "detect", 
  "template": "yes", 
  "template_type": "SSD detection via ArmNN (with TFLite support, C++)"
}
